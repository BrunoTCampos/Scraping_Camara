install.packages("ggplot2")
install.packages("knitr")
install.packages("kableExtra")
install.packages("gridExtra")
install.packages("tidytext")
install.packages("stringr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("wordcloud2")
install.packages("readxl")
install.packages("openxlsx")
install.packages("textdata")
install.packages("igraph")
install.packages("ggraph")
install.packages("ggrepel")
install.packages("tm")
install.packages("foreign")
install.packages("dplyr")
install.packages("writexl")
install.packages("tidyverse")
install.packages("devtools")
install.packages("widyr")
install.packages("wordcloud")
install.packages("syuzhet")
install.packages("RColorBrewer")
install.packages("gridExtra")
library(httr)
library(jsonlite)
library(widyr)
library(devtools)
library(tidyverse)
library(circlize)
library(writexl)
library(dplyr)
library(tidytext)
library(stringr)
library(tidyr)
library(foreign)
library(igraph)
library(ggraph)
library(ggrepel)
library(tm)
library(ggplot2)
library(wordcloud2)
library(readxl)
library(openxlsx)
library(textdata)
library(knitr)
library(kableExtra)
library(wordcloud)
library(syuzhet)
library(RColorBrewer)
library(dplyr)
library(gridExtra)
endpoint <- "https://dadosabertos.camara.leg.br/api/v2/deputados?dataInicio=1999-01-01&dataFim=2024-12-31&ordem=ASC&ordenarPor=nome"
response <- GET(url = endpoint)
response$content
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
jsonresp$dados #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$dados #criou-se uma variavel que armazena essas informacoes
endpoint <- "https://dadosabertos.camara.leg.br/api/v2/deputados?dataInicio=1994-01-01&dataFim=2024-12-31&ordem=ASC&ordenarPor=nome"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$dados #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$dados #criou-se uma variavel que armazena essas informacoes
View(tabdeps)
View(tabdeps)
# no link
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?dataInicio=1999-01-01&dataFim=2023-12-31&ordenarPor=dataHoraInicio&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
View(tabdiscs)
View(tabdeps)
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?idLegislatura=54&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
library(httr)
library(jsonlite)
#endpoint: nome chique para o link que se usa para acessar os dados de uma API
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/57"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$dados #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$dados #criou-se uma variavel que armazena essas informacoes
View(jsonresp)
#endpoint: nome chique para o link que se usa para acessar os dados de uma API
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/57"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #criou-se uma variavel que armazena essas informacoes
#endpoint: nome chique para o link que se usa para acessar os dados de uma API
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/57"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #parte especifica onde tem as informacoes desejadas
tabsen <- jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #criou-se uma variavel que armazena essas informacoes
View(tabsen)
View(tabdeps)
library(httr)
library(jsonlite)
#endpoint: nome chique para o link que se usa para acessar os dados de uma API
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/57"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #parte especifica onde tem as informacoes desejadas
tabsen <- jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #criou-se uma variavel que armazena essas informacoes
View(tabsen)
View(tabsen)
names(tabsen)[names(tabsen) == "IdentificacaoParlamentar.CodigoParlamentar"] <- "id"
for(i in 1:nrow(tabsen)){ #1:nrow = da primeira linha até a ultima linha
print(tabsen$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://legis.senado.leg.br/dadosabertos/senador/",tabsen$id[i],"/discursos?dataFim=20231231&dataInicio=19990101")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabsen$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
View(tabsen)
names(tabsen)[names(tabsen) == "IdentificacaoParlamentar.CodigoParlamentar"] <- "id"
for(i in 1:nrow(tabsen)){ #1:nrow = da primeira linha até a ultima linha
print(tabsen$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://legis.senado.leg.br/dadosabertos/senador/",tabsen$id[i],"/discursos?dataFim=20231231&dataInicio=19990101")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabsen$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
View(jsondisc1)
View(jsondisc1)
library(httr)
library(jsonlite)
# Endpoint inicial
endpoint <- "https://dadosabertos.camara.leg.br/api/v2/deputados?dataInicio=1994-01-01&dataFim=2024-12-31&ordem=ASC&ordenarPor=nome"
response <- GET(url = endpoint)
textresp <- rawToChar(response$content)
jsonresp <- fromJSON(textresp, flatten = TRUE)
# Obter dados dos deputados
tabdeps <- jsonresp$dados
# Inicializar dataframe para armazenar todos os discursos
df <- data.frame()
# Loop para obter discursos de cada deputado
for(i in 1:nrow(tabdeps)) {
print(tabdeps$id[i])
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/", tabdeps$id[i], "/discursos?idLegislatura=54&ordem=ASC")
print(endpoint2)
respdisc <- GET(url = endpoint2)
textdisc <- rawToChar(respdisc$content)
# Tentar converter para JSON
tryCatch({
jsondisc1 <- fromJSON(textdisc, flatten = TRUE)
if (!is.null(jsondisc1$dados)) {  # Verifica se há dados
tabdiscs <- jsondisc1$dados
tabdiscs["id"] <- tabdeps$id[i]
# Verificar consistência de colunas
if (nrow(df) == 0) {
df <- tabdiscs
} else {
# Garantir que tabdiscs tenha as mesmas colunas que df
missing_cols <- setdiff(names(df), names(tabdiscs))
for (col in missing_cols) {
tabdiscs[[col]] <- NA
}
extra_cols <- setdiff(names(tabdiscs), names(df))
for (col in extra_cols) {
df[[col]] <- NA
}
df <- rbind(df, tabdiscs)
}
}
}, error = function(e) {
message("Erro ao processar o deputado ID: ", tabdeps$id[i])
message("Erro: ", e)
})
}
View(df)
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/56"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp[["ListaParlamentarLegislatura"]][["Parlamentares"]][["Parlamentar"]] #parte especifica onde tem as informacoes desejadas
tabsen <- jsonresp[["ListaParlamentarLegislatura"]][["Parlamentares"]][["Parlamentar"]] #criou-se uma variavel que armazena essas informacoes
# Segunda parte ja tendo os dados dos deps
#o for faz um loop para puxar os discursos de todos os deputados, mudando o numero do id
# no link
for(i in 1:nrow(tabsen)){ #1:nrow = da primeira linha até a ultima linha
print(tabsen$IdentificacaoParlamentar.CodigoParlamentar[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://legis.senado.leg.br/dadosabertos/senador/",tabsen$IdentificacaoParlamentar.CodigoParlamentar[i],"/discursos?dataFim=20221231&dataInicio=20190101")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i]# criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
for(i in 1:nrow(tabsen)){ #1:nrow = da primeira linha até a ultima linha
print(tabsen$IdentificacaoParlamentar.CodigoParlamentar[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://legis.senado.leg.br/dadosabertos/senador/",tabsen$IdentificacaoParlamentar.CodigoParlamentar[i],"/discursos?dataFim=20221231&dataInicio=20190101")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabsen$id[i]# criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
endpoint <- "https://legis.senado.leg.br/dadosabertos/senador/lista/legislatura/51/56"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #parte especifica onde tem as informacoes desejadas
tabsen <- jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar] #criou-se uma variavel que armazena essas informacoes
tabsen <- jsonresp$ListaParlamentarLegislatura$Parlamentares$Parlamentar #criou-se uma variavel que armazena essas informacoes
for(i in 1:nrow(tabsen)){ #1:nrow = da primeira linha até a ultima linha
print(tabsen$IdentificacaoParlamentar.CodigoParlamentar[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://legis.senado.leg.br/dadosabertos/senador/",tabsen$IdentificacaoParlamentar.CodigoParlamentar[i],"/discursos?dataFim=20221231&dataInicio=20190101")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1[["DiscursosParlamentar"]][["Parlamentar"]][["Pronunciamentos"]][["Pronunciamento"]] #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabsen$id[i]# criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
#endpoint: nome chique para o link que se usa para acessar os dados de uma API
endpoint <- "https://dadosabertos.camara.leg.br/api/v2/deputados?idLegislatura=56&ordem=ASC&ordenarPor=nome"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$dados #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$dados #criou-se uma variavel que armazena essas informacoes
# Segunda parte ja tendo os dados dos deps
#o for faz um loop para puxar os discursos de todos os deputados, mudando o numero do id
# no link
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?idLegislatura=56&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
endpoint <- "https://dadosabertos.camara.leg.br/api/v2/deputados?idLegislatura=56&ordem=ASC&ordenarPor=nome"
response <- GET(url = endpoint)
response$content
#está em formato binario?, ilegivel, é preciso converter p texto, depois pra json.
textresp <- rawToChar(response$content) # p virar texto
jsonresp <- fromJSON(textresp, flatten = TRUE) # deixa as informacoes do json flat, para ficar
# mais simples de ler
jsonresp$dados #parte especifica onde tem as informacoes desejadas
tabdeps <- jsonresp$dados #criou-se uma variavel que armazena essas informacoes
View(jsonresp)
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?idLegislatura=56&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df,tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
View(jsondisc1)
View(tabdiscs)
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?idLegislatura=56&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df, tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
for(i in 1:nrow(tabdeps)){ #1:nrow = da primeira linha até a ultima linha
print(tabdeps$id[i]) # esse print serve para que possamos ver em qual id ele ta enquanto o codigo roda
endpoint2 <- paste0("https://dadosabertos.camara.leg.br/api/v2/deputados/",tabdeps$id[i],"/discursos?idLegislatura=56&ordem=ASC")
# o paste0 é uma funcao que permite modificar o link em cada rodada do loop
print(endpoint2) #mostra o link já alterado com o numero id de cada parlamentar enquanto o codigo roda
respdisc <- GET(url = endpoint2) # criou uma variavel para receber os discursos dos links
respdisc$content # parte especifica da variavel que tem as info. relevantes
textdisc <- rawToChar(respdisc$content) #está em formato binario?, ilegivel, é preciso converter p texto
jsondisc1 <- fromJSON(textdisc, flatten = TRUE) #é preciso converter p JSON, o flatten deixa
#as informacoes do json flat, para ficar mais simples de ler
jsondisc1$dados #parte especifica onde tem as info. relevantes
tabdiscs <- jsondisc1$dados #criamos a variavel para armazenar os discursos dos parlamentares
tabdiscs["id"]=tabdeps$id[i] # criou uma coluna, dentro da variavel tabdiscs, com os ids
if(!is.null(nrow(tabdiscs))){ #se o id tiver discursos, o for puxa
if(i == 1){ # na 1a rodada do loop, puxa os discursos do 1o deputado do tabdiscs pro df, onde
#ficarao todos os discursos e ids
df <- tabdiscs
}
else{
df <- rbind(df, tabdiscs) #nas demais rodadas, juntar pela linha, o df e o tabdiscs
}
}
}
